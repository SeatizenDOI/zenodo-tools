---
import "choices.js/public/assets/styles/choices.min.css";

const { id_drop } = Astro.props;
---

<dropdown-explorer data-id={id_drop}>
    <select id={id_drop} multiple>
        <optgroup label="Orthophoto">
            <option value="ortho_2022">Orthophoto 2022</option>
            <option value="ortho_2023">Orthophoto 2023</option>
            <option value="ortho_2024">Orthophoto 2024</option>
            <option value="ortho_2025">Orthophoto 2025</option>
        </optgroup>
        <optgroup label="Bathymetry">
            <option value="bathy_2022">Bathymetry 2022</option>
            <option value="bathy_2023">Bathymetry 2023</option>
            <option value="bathy_2024">Bathymetry 2024</option>
            <option value="bathy_2025">Bathymetry 2025</option>
        </optgroup>
        <optgroup label="Map Habitat">
            <option value="predictions_2023">Map Habitat 2023</option>
            <option value="predictions_2024">Map Habitat 2024</option>
            <option value="predictions_2025">Map Habitat 2025</option>
        </optgroup>
    </select>
</dropdown-explorer>

<script>
    import Choices from "choices.js";
    import { ZmExplorerAttribute } from "@lib/ZmExplorer";

    class DropdownExplorer extends HTMLElement {
        constructor() {
            super();

            const dropdown_element = document.getElementById(
                this.dataset.id ?? ""
            )! as HTMLSelectElement;

            const choices = new Choices(dropdown_element, {
                removeItemButton: true,
                placeholderValue: "Select which map to show",
                noResultsText: "No results found",
                noChoicesText: "No choices to choose from",
                loadingText: "Loading...",
                shouldSort: false,
            });

            const side_onload = this.dataset.id?.includes("left") ? "left" : "right";

            const url = new URL(window.location.href);
            const side_data = String(url.searchParams.get(side_onload) ?? "");

            let current_char = "";
            for (const c of side_data) {
                if (+isNaN(Number(c))) {
                    current_char = c;
                } else {
                }

                console.log(c);
            }

            console.log(side_data);

            dropdown_element.addEventListener("change", () => {
                // @ts-ignore getValues always an array
                const selected = choices.getValue().map((opt) => opt.value);

                const explorer = document.querySelector(ZmExplorerAttribute);
                console.log(explorer);
                if (explorer) {
                    // @ts-ignore (no correct types)
                    explorer.update_layers(this.dataset.id ?? "", selected);
                }
                const side = this.dataset.id?.includes("left") ? "left" : "right";

                let a: Record<string, string> = {};
                for (const code of selected) {
                    const ly = code.split("_");
                    const layer_type = String(ly[0][0]);
                    const year = ly[1].slice(2, 4);
                    if (!(layer_type in a)) {
                        a[layer_type] = "";
                    }
                    a[layer_type] += year;
                }
                let final = "";
                for (const [k, v] of Object.entries(a)) {
                    final += k + v;
                }
                const url = new URL(window.location.href);
                if (final == "") {
                    url.searchParams.delete(side);
                } else {
                    url.searchParams.set(side, final);
                }
                window.history.replaceState({}, "", url);
            });
        }
    }
    window.customElements.define("dropdown-explorer", DropdownExplorer);
</script>

<style>
    dropdown-explorer {
        width: 45%;
    }
</style>
