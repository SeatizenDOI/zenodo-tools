---

---

<leaflet-explorer>
  <div style="height: 60vh; z-index: 0;" id="map-explorer"></div>
</leaflet-explorer>

<script>
  import L from "leaflet";
  import "leaflet/dist/leaflet.css";
  import "leaflet-fullscreen";
  import "leaflet-fullscreen/dist/leaflet.fullscreen.css";
  import "leaflet-splitmap";

  class LeafletExplorer extends HTMLElement {
    is_split: boolean;
    map: L.Map;
    splitControl: any;
    right_side: Record<string, L.TileLayer>;
    left_side: Record<string, L.TileLayer>;

    constructor() {
      super();

      this.is_split = true;
      this.right_side = {};
      this.left_side = {};

      const url = new URL(window.location.href);
      const lat = Number(url.searchParams.get("lat") ?? -21.085198);
      const lng = Number(url.searchParams.get("lng") ?? 55.222047);
      const zoom = Number(url.searchParams.get("zoom") ?? 13);

      this.map = L.map("map-explorer", {
        // @ts-ignore (no correct types)
        fullscreenControl: true,
        minZoom: 5,
      }).setView([lat, lng], zoom);

      const background_map = L.tileLayer(
        "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
        {
          attribution: "Tiles Â© Esri",
          opacity: 0.75,
        }
      ).addTo(this.map);

      const background_map2 = L.tileLayer(
        "https://{s}.basemaps.cartocdn.com/rastertiles/light_only_labels/{z}/{x}/{y}{r}.png",
        {
          attribution:
            '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
        }
      ).addTo(this.map);

      this.splitControl = L.control // @ts-ignore (no correct types)
        .splitMap(Object.values(this.left_side), Object.values(this.right_side))
        .addTo(this.map);

      this.map.on("moveend", (e) => {
        const url = new URL(window.location.href);
        url.searchParams.set(
          "lat",
          this.map.getCenter()["lat"].toFixed(6).toString()
        );
        url.searchParams.set(
          "lng",
          this.map.getCenter()["lng"].toFixed(6).toString()
        );
        url.searchParams.set("zoom", this.map.getZoom().toString());

        window.history.replaceState({}, "", url);
      });
    }

    // Show or hide the split pan.
    toggle_split_map() {
      if (this.is_split) {
        this.map.removeControl(this.splitControl);
      } else {
        this.splitControl = L.control // @ts-ignore (no correct types)
          .splitMap(
            Object.values(this.left_side),
            Object.values(this.right_side)
          )
          .addTo(this.map);
      }
      this.is_split = !this.is_split;
    }

    // Add layers
    update_layers(side_id: string, layers_code: string[]) {
      // Each time we redraw the splitlane.
      this.map.removeControl(this.splitControl);

      // Remove all the layer at the left or the right.
      if (side_id.includes("left")) {
        for (const t of Object.values(this.left_side)) {
          this.map.removeLayer(t);
        }
        this.left_side = {};
      } else {
        for (const t of Object.values(this.right_side)) {
          this.map.removeLayer(t);
        }
        this.right_side = {};
      }

      // For each code, we create a new tile.
      for (const code of layers_code) {
        console.log(code);
        const ly = code.split("_");

        const url = `https://tmsserver.ifremer.re/wmts?request=GetTile&layer=${ly[0]}&year=${ly[1]}&tilematrix={z}&tilerow={x}&tilecol={y}`; // TODO Change this URL

        const tile = L.tileLayer(url, {
          attribution: "&copy; Ifremer DOI",
          minZoom: 5,
          maxZoom: 28,
        }).addTo(this.map);

        if (side_id.includes("left")) {
          this.left_side[code] = tile;
        } else {
          this.right_side[code] = tile;
        }
      }

      // Re draw the split lane.
      this.splitControl = L.control // @ts-ignore (no correct types)
        .splitMap(Object.values(this.left_side), Object.values(this.right_side))
        .addTo(this.map);
    }
  }

  window.customElements.define("leaflet-explorer", LeafletExplorer);
</script>
